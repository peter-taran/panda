
Какие возможности нужны у платформы


Int, Uint - "быстрые" целые, с родным для платформы размером
Int16, Uint16 - целые с точным размером

Int foo1; // foo1 инициализировано нулём
Int foo2 = uninitialized; // foo2 брошен как есть, для скорости

Real, Real32, Real64, Real80 - вещественные заданного размера, первый из которых эквивалентен Real64

Bool - булево значение

Char - текстовый символ (на самом деле это шаблон, включающий кодировку Char<Encoding>)
CharEnc - символа с динамическим указанием кодировки
Str, Str<Encoding>, StrEnc - аналогично для строк, строки неизменяемы (только заменяемы), поддерживают перебор символов
Bufstr<size>, Bufstr<size, Encoding> - буфер заданного размера под строку; внутри лежит только буфер
StrBuilder - класс с широкими возможностями изменения строки

Seq<class> - универсальный контейнер, не допускающий добавления/удаления элементов, но допускающий их перебор

Byte - байт в памяти, не число, а просто абстрактный байт
Ptr - универсальный указатель, вместо void*, поддерживает арифметику - сдвиг по байтам
Memint - беззнаковое число с числом битов, достаточным для представления любого размера в памяти
Ptr+Memint -> Ptr
Ptr-Ptr -> Memint
Memarea - область памяти, является Byte-контейнером, можно перебирать

Membuf<size> - область памяти размера size
Memstor<class> - область памяти под размещение объекта типа class

Memstor<Foo> x;
x.construct(p1, p2, p3);
*x // получение ссылки на Foo
x->member // обращение к члену Foo
x.destruct();

Описание флагов и перечислений такое, чтобы можно было проверять принадлежность константы к нему

Flags - тип
Flags::red, Flags::green - отдельные значения
Flags(10) - инициализация с проверкой допустимости
Flags(10, dontcheck) - без проверки, доверительная
Flags::all() - Seq<Flags> со всеми константами